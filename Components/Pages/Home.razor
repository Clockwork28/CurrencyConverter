
@page "/"
@inject ExchangeRatesService ExchangeService
@inject FavouritePairService Favourites
@using Microsoft.Maui.Controls

<header>
    <h1 class="text-center fw-bold">CURRENCY CONVERTER</h1>
</header>

<br />
    <main>
        <div class="container align-items-center">
            @if (rates != null)
            {
                <div class="row align-items-center justify-content-center flex-nowrap gap-2">
                    <!-- Dropdowns for selecting input and output currencies-->
                    <div class="col-auto gap-2 d-flex flex-column" style="max-width: 40%">
                        <select class="form-control w-auto" value="@chosenFrom" @onchange="ChosenFromChange">
                            <optgroup label="Currencies">
                                @foreach (var entry in ExchangeService.fiatRates)
                                {
                                    <option value="@entry.Key">@entry.Key</option>
                                }
                            </optgroup>
                            <optgroup label="Cryptocurencies">
                                @foreach (var entry in ExchangeService.cryptoRates)
                                {
                                    <option value="@entry.Key">@entry.Key</option>
                                }
                            </optgroup>
                            <optgroup label="Other Currencies">
                                @foreach (var entry in ExchangeService.otherRates)
                                {
                                    <option value="@entry.Key">@entry.Key</option>
                                }
                            </optgroup>
                        </select>
                        <!-- Input amount field with immediate conversion on input-->
                        <input class="form-control w-auto"type="number" @bind="@amount" step="0.01" @bind:event="oninput" @bind:after="Convert" />
                    </div>
                    <div class="col-auto d-flex align-content-center justify-content-center" style="max-width: 10%">
                        <div class="w-auto d-flex justify-content-center">
                            <button class="btn btn-oval btn-outline-secondary" @onclick="SwapCurrencies">↔️</button>
                        </div>

                    </div>
                    <div class="col-auto gap-2 d-flex flex-column" style="max-width: 40%">
                        <select class="form-control w-auto" value="@chosenTo" @onchange="ChosenToChange">
                            <optgroup label="Currencies">
                                @foreach (var entry in ExchangeService.fiatRates)
                                {
                                    <option value="@entry.Key">@entry.Key</option>
                                }
                            </optgroup>
                            <optgroup label="Cryptocurencies">
                                @foreach (var entry in ExchangeService.cryptoRates)
                                {
                                    <option value="@entry.Key">@entry.Key</option>
                                }
                            </optgroup>
                            <optgroup label="Other Currencies">
                                @foreach (var entry in ExchangeService.otherRates)
                                {
                                    <option value="@entry.Key">@entry.Key</option>
                                }
                            </optgroup>
                        </select>
                        <!-- Display converted result, read-only-->
                        <input class="form-control w-auto" type="number" @bind="@result" step="0.01" readonly />
                    </div>       
                </div>
            }
        </div>
        <br />
        <div class="row align-items-center justify-content-center flex-nowrap gap-2">
            <div class="col-auto gap-2 d-flex flex-column" style="max-width: 40%">
                <button class="btn btn-outline-secondary" @onclick="AddPair">Add to favourites</button>
            </div>
            <div class="col-auto gap-2 d-flex flex-column" style="max-width: 40%">
                <button class="btn btn-outline-secondary" @onclick="RemovePair">Remove favourite</button>
            </div>
        </div>
        <br />
    <div class="favourites container d-flex gap-2 flex-column align-items-center">
            @foreach (var pair in Favourites._favPairs)
            {
                <button class="btn btn-outline-secondary" @onclick="() => ApplyFavourite(pair)">@pair</button>
            }
        </div>

    </main>
@code
{
    private ExchangeRatesResponse? rates;

    // Fetch initial exchange rates and set default currencies
    protected override async Task OnInitializedAsync()
    {
        await ExchangeService.InitAsync();
        await Favourites.InitAsync();
        rates = await ExchangeService.GetRates();
        chosenFrom = "USD";
        chosenTo = "EUR";
    }
    private string chosenFrom = "";
    private string chosenTo = "";
    private decimal amount = 0.00M;
    private decimal result = 0.00M;

    // Update currency selection and recalculate conversion
    private async Task ChosenFromChange(ChangeEventArgs e)
    {
        chosenFrom = e.Value?.ToString() ?? "";
        await Convert();
    }

    private async Task ChosenToChange(ChangeEventArgs e)
    {
        chosenTo = e.Value?.ToString() ?? "";
        await Convert();
    }

    // Calculate and update the converted amount dynamically
    private async Task Convert()
    {
        await Task.Yield();
        result = ExchangeService.Convert(amount, chosenFrom, chosenTo);

    }

    private async Task SwapCurrencies()
    {
        (chosenFrom, chosenTo) = (chosenTo, chosenFrom);
        await Convert();
    }

    private async Task AddPair()
    {
        var pair = new FavouritePair
        { 
            From = chosenFrom,
            To = chosenTo
        };

        if (pair.From != pair.To){}
        await Favourites.AddFavPair(pair);
    }

    private async Task RemovePair()
    {
        var pair = new FavouritePair
        {
                From = chosenFrom,
                To = chosenTo
        };

        await Favourites.RemoveFavPair(pair);

    }

    private async Task ApplyFavourite(FavouritePair pair)
    {
        (chosenFrom, chosenTo) = (pair.From, pair.To);
        await Convert();
    }
}